// Generated by Apple Swift version 3.1 (swiftlang-802.0.53 clang-802.0.42)
#pragma clang diagnostic push

#if defined(__has_include) && __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if defined(__has_include) && __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus) || __cplusplus < 201103L
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if defined(__has_attribute) && __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if defined(__has_attribute) && __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if defined(__has_attribute) && __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if defined(__has_attribute) && __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if defined(__has_attribute) && __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if defined(__has_attribute) && __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name) enum _name : _type _name; enum SWIFT_ENUM_EXTRA _name : _type
# if defined(__has_feature) && __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME) SWIFT_ENUM(_type, _name)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if defined(__has_feature) && __has_feature(modules)
@import ObjectiveC;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
enum SPHAccountStatus : NSInteger;

/// Account represents an account object from the Stormpath database.
SWIFT_CLASS_NAMED("Account")
@interface SPHAccount : NSObject
/// Stormpath resource URL for the account
@property (nonatomic, readonly, copy) NSURL * _Null_unspecified href;
/// Username of the user. Separate from the email, but is often set to the email
/// address.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified username;
/// Email address of the account.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified email;
/// Given (first) name of the user.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified givenName;
/// Middle name of the user. Optional.
@property (nonatomic, readonly, copy) NSString * _Nullable middleName;
/// Sur (last) name of the user.
@property (nonatomic, readonly, copy) NSString * _Null_unspecified surname;
/// Full name of the user.
@property (nonatomic, readonly, copy) NSString * _Nonnull fullName;
/// Date the account was created in the Stormpath database.
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified createdAt;
/// Date the account was last modified in the Stormpath database.
@property (nonatomic, readonly, copy) NSDate * _Null_unspecified modifiedAt;
/// Status of the account. Useful if email verification is needed.
@property (nonatomic, readonly) enum SPHAccountStatus status;
/// A string of JSON representing the custom data for the account. Read-only.
@property (nonatomic, readonly, copy) NSString * _Nullable customData;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

/// Stormpath Account Status
typedef SWIFT_ENUM_NAMED(NSInteger, SPHAccountStatus, "AccountStatus") {
/// Enabled means that we can login to this account
  SPHAccountStatusEnabled = 0,
/// Unverified is the same as disabled, but a user can enable it by
/// clicking on the activation email.
  SPHAccountStatusUnverified = 1,
/// Disabled means that users cannot log in to the account.
  SPHAccountStatusDisabled = 2,
};


@interface NSNumber (SWIFT_EXTENSION(Stormpath))
@end

/// Social Login Providers
typedef SWIFT_ENUM_NAMED(NSInteger, SPHProvider, "Provider") {
/// Facebook
  SPHProviderFacebook = 0,
/// Google
  SPHProviderGoogle = 1,
/// Linkedin
  SPHProviderLinkedin = 2,
/// GitHub
  SPHProviderGithub = 3,
/// Twitter
  SPHProviderTwitter = 4,
};


/// Model for the account registration form. The fields requested in the initializer
/// are required.
SWIFT_CLASS_NAMED("RegistrationForm")
@interface SPHRegistrationForm : NSObject
/// Given (first) name of the user.
@property (nonatomic, copy) NSString * _Nonnull givenName;
/// Sur (last) name of the user.
@property (nonatomic, copy) NSString * _Nonnull surname;
/// Email address of the user.
@property (nonatomic, copy) NSString * _Nonnull email;
/// Password for the user.
@property (nonatomic, copy) NSString * _Nonnull password;
/// Username. Optional, but if not set retains the value of the email address.
@property (nonatomic, copy) NSString * _Nonnull username;
/// Custom fields may be configured in the server-side API. Include them in
/// this
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull customFields;
/// Initializer for Registration Form. After initialization, all fields can be
/// modified.
/// \param givenName Given (first) name of the user.
///
/// \param surname Sur (last) name of the user.
///
/// \param email Email address of the user.
///
/// \param password Password for the user.
///
- (nonnull instancetype)initWithEmail:(NSString * _Nonnull)email password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end

@class SPHStormpathConfiguration;
@class NSError;
@class UIApplication;

/// Stormpath represents the state of the application’s connection to the Stormpath
/// Client API. It allows you to connect to the Stormpath Client API,
/// register, login, and stores the current account’s access and
/// refresh tokens securely. All callbacks to the application are handled on the
/// main thread.
SWIFT_CLASS_NAMED("Stormpath")
@interface SPHStormpath : NSObject
/// Singleton representing the primary Stormpath instance using the default configuration.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SPHStormpath * _Nonnull sharedSession;)
+ (SPHStormpath * _Nonnull)sharedSession SWIFT_WARN_UNUSED_RESULT;
/// Configuration parameter for the Stormpath object. Can be changed.
@property (nonatomic, strong) SPHStormpathConfiguration * _Nonnull configuration;
/// Initializes the Stormpath object with a default configuration. The
/// identifier is used to namespace the current state of the object, so that on
/// future loads we can find the saved credentials from the right location. The
/// default identifier is “default”.
- (nonnull instancetype)initWithIdentifier:(NSString * _Nonnull)identifier OBJC_DESIGNATED_INITIALIZER;
/// This method registers an account from the data provided.
/// \param account A RegistrationForm object with the account data you want to
/// register.
///
/// \param callback The completion block to be invoked after the API
/// request is finished. It returns an account object.
///
- (void)registerWithAccount:(SPHRegistrationForm * _Nonnull)account callback:(void (^ _Nullable)(SPHAccount * _Nullable, NSError * _Nullable))callback;
/// Logs in an account. This method also stores the account access tokens for later
/// use.
/// \param username Account’s email or username.
///
/// \param password Account password.
///
/// \param callback The completion block to be invoked after the API
/// request is finished. If the method fails, the error will be passed in
/// the completion.
///
- (void)loginWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Begins a login flow with a social provider, presenting or opening up Safari
/// (iOS8) to handle login. This WILL NOT call back if the user clicks “cancel”
/// on the login screen, as they never began the login process in the first
/// place.
/// \param socialProvider the provider (Facebook, Google, etc) from which you
/// have an access token
///
/// \param callback Callback on success or failure
///
- (void)loginWithProvider:(enum SPHProvider)provider callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Logs in an account if you have an access token from a social provider.
/// \param socialProvider the provider (Facebook, Google, etc) from which you
/// have an access token
///
/// \param accessToken String containing the access token
///
/// \param callback A block of code that is called back on success or
/// failure.
///
- (void)loginWithProvider:(enum SPHProvider)provider accessToken:(NSString * _Nonnull)accessToken callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Fetches the account data, and returns it in the form of a dictionary.
/// \param callback Completion block invoked
///
- (void)meWithCallback:(void (^ _Nullable)(SPHAccount * _Nullable, NSError * _Nullable))callback;
/// Logs out the account and clears the sessions tokens.
- (void)logout;
/// Generates an account password reset token and sends an email to the user,
/// if such email exists.
/// \param email Account email. Usually from an input.
///
/// \param callback The completion block to be invoked after the API
/// request is finished. This will always succeed if there are no network problems.
///
- (void)resetPasswordWithEmail:(NSString * _Nonnull)email callback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
/// Deep link handler (iOS9)
- (BOOL)application:(UIApplication * _Nonnull)app open:(NSURL * _Nonnull)url options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> * _Nonnull)options SWIFT_WARN_UNUSED_RESULT;
/// Deep link handler (<iOS9)
- (BOOL)application:(UIApplication * _Nonnull)application open:(NSURL * _Nonnull)url sourceApplication:(NSString * _Nullable)sourceApplication annotation:(id _Nonnull)annotation SWIFT_WARN_UNUSED_RESULT;
/// Provides the last access token fetched by either login or
/// refreshAccessToken functions.
///
/// returns:
/// Access token for your API calls.
@property (nonatomic, readonly, copy) NSString * _Nullable accessToken;
/// Refresh token for the current account.
@property (nonatomic, readonly, copy) NSString * _Nullable refreshToken;
/// Refreshes the access token and stores it to be available via accessToken
/// var. Call this function if your token expires.
/// \param callback Block invoked on function completion. It will have
/// either a new access token passed as a string, or an error if one
/// occurred.
///
- (void)refreshAccessTokenWithCallback:(void (^ _Nullable)(BOOL, NSError * _Nullable))callback;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
@end


/// StormpathConfiguration is the class that manages the configuration for
/// Stormpath, its endpoints, and API providers. It auto-loads from the
/// configuration in Info.plist, or uses defaults that connect to a server on
/// http://localhost:3000, the default in many Stormpath integrations. You can
/// modify its properties directly.
/// note:
/// The endpoints refer to the endpoints in the Stormpath Framework Spec.
/// Use leading slashes to specify the endpoints.
SWIFT_CLASS_NAMED("StormpathConfiguration")
@interface SPHStormpathConfiguration : NSObject
/// Singleton object representing the default configuration loaded from the
/// config file. Used by the main Stormpath instance. Can be modified
/// programmatically.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, strong) SPHStormpathConfiguration * _Nonnull defaultConfiguration;)
+ (SPHStormpathConfiguration * _Nonnull)defaultConfiguration SWIFT_WARN_UNUSED_RESULT;
+ (void)setDefaultConfiguration:(SPHStormpathConfiguration * _Nonnull)value;
/// Configuration parameter for the API URL.
@property (nonatomic, copy) NSURL * _Nonnull APIURL;
/// Initializer for StormpathConfiguration. The initializer pulls defaults from
/// the Info.plist file, and falls back to default SDK values. Modify the
/// values after initialization to customize this object.
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSCoder;

/// StormpathError represents an error that can be passed back by a Stormpath API
/// after a network response. It typically contains a HTTP status code, along with
/// a localizedDescription of the specific error as passed back by the Framework
/// Integration API. It also has two special error codes:
/// 0 - Internal SDK Error (which should be reported to Stormpath as a bug)
/// 1 - Unrecognized API Response (which means the Framework integration may not
/// support this version of Stormpath)
SWIFT_CLASS_NAMED("StormpathError")
@interface SPHStormpathError : NSError
/// Not implemented, do not use.
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDomain:(NSString * _Nonnull)domain code:(NSInteger)code userInfo:(NSDictionary * _Nullable)dict SWIFT_UNAVAILABLE;
@end

#pragma clang diagnostic pop
